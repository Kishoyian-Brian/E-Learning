generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  email                String                @unique
  password             String
  name                 String
  role                 Role
  isVerified           Boolean               @default(false)
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  certificates         Certificate[]
  Class                Class[]
  courses              Course[]              @relation("InstructorCourses")
  discussions          DiscussionPost[]
  discussionReplies    DiscussionReply[]
  discussionVotes      DiscussionVote[]
  discussionReplyVotes DiscussionReplyVote[]
  enrollments          Enrollment[]
  receivedMessages     Message[]             @relation("ReceivedMessages")
  sentMessages         Message[]             @relation("SentMessages")
  notifications        Notification[]
  passwordResetTokens  PasswordResetToken[]
  quizAttempts         QuizAttempt[]
  reviews              Review[]
  timetable            TimetableEntry[]
  verificationTokens   VerificationToken[]
  UserActivity         UserActivity[]
  VideoProgress        VideoProgress[]
  QuizCompletion       QuizCompletion[]

  @@index([email])
  @@index([role])
}

model VerificationToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model DifficultyLevel {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Course {
  id           String           @id @default(uuid())
  title        String
  description  String
  instructorId String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  categoryId   String
  difficultyId String
  certificates Certificate[]
  classes      Class[]
  category     Category         @relation(fields: [categoryId], references: [id])
  difficulty   DifficultyLevel  @relation(fields: [difficultyId], references: [id])
  instructor   User             @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  discussions  DiscussionPost[]
  enrollments  Enrollment[]
  modules      Module[]
  quizzes      Quiz[]
  reviews      Review[]

  @@index([instructorId])
  @@index([categoryId])
  @@index([difficultyId])
}

model Module {
  id                 String              @id @default(uuid())
  title              String
  description        String
  courseId           String
  order              Int
  materials          Material[]
  course             Course              @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress           Progress[]
  UserActivity       UserActivity[]
  VideoProgress      VideoProgress[]
  QuizCompletion     QuizCompletion[]
  ModuleRequirements ModuleRequirements?

  @@index([courseId])
}

model Material {
  id            String          @id @default(uuid())
  type          MaterialType
  url           String
  moduleId      String
  visible       Boolean         @default(true)
  createdAt     DateTime        @default(now())
  description   String?
  order         Int
  title         String
  updatedAt     DateTime        @updatedAt
  module        Module          @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  UserActivity  UserActivity[]
  VideoProgress VideoProgress[]

  @@index([moduleId])
}

model Class {
  id           String           @id @default(uuid())
  title        String
  courseId     String
  instructorId String
  startTime    DateTime
  endTime      DateTime
  course       Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  instructor   User             @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  timetable    TimetableEntry[]

  @@index([courseId])
  @@index([instructorId])
  @@index([startTime])
}

model TimetableEntry {
  id      String          @id @default(uuid())
  classId String
  userId  String
  date    DateTime
  status  TimetableStatus
  class   Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  user    User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([classId])
  @@index([userId])
  @@index([date])
}

model Enrollment {
  id          String        @id @default(uuid())
  userId      String
  courseId    String
  enrolledAt  DateTime      @default(now())
  course      Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  progress    Progress[]
  Certificate Certificate[]

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Progress {
  id               String     @id @default(uuid())
  enrollmentId     String
  moduleId         String
  completed        Boolean    @default(false)
  completedAt      DateTime?
  completedBy      String? // userId who completed (for instructor override)
  completionReason String? // reason for completion
  enrollment       Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  module           Module     @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, moduleId])
  @@index([enrollmentId])
  @@index([moduleId])
}

model UserActivity {
  id           String    @id @default(uuid())
  userId       String
  moduleId     String
  materialId   String?
  activityType String // "view", "watch", "quiz", "download"
  startedAt    DateTime  @default(now())
  endedAt      DateTime?
  duration     Int? // in seconds
  progress     Int       @default(0) // percentage (0-100)
  metadata     Json?
  createdAt    DateTime  @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  module   Module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  material Material? @relation(fields: [materialId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([moduleId])
  @@index([activityType])
}

model VideoProgress {
  id                String   @id @default(uuid())
  userId            String
  materialId        String
  moduleId          String
  currentTime       Int      @default(0) // seconds
  duration          Int      @default(0) // total video duration
  watchedPercentage Int      @default(0)
  isCompleted       Boolean  @default(false)
  lastWatchedAt     DateTime @default(now())
  createdAt         DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  material Material @relation(fields: [materialId], references: [id], onDelete: Cascade)
  module   Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, materialId])
  @@index([userId])
  @@index([materialId])
}

model QuizCompletion {
  id          String   @id @default(uuid())
  userId      String
  quizId      String
  moduleId    String
  score       Int?
  maxScore    Int?
  passed      Boolean  @default(false)
  attempts    Int      @default(1)
  completedAt DateTime @default(now())
  createdAt   DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)
  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
  @@index([userId])
  @@index([moduleId])
}

model ModuleRequirements {
  id                      String   @id @default(uuid())
  moduleId                String   @unique
  minTimeSpent            Int      @default(0) // minimum seconds required
  requireAllMaterials     Boolean  @default(true)
  requireQuizCompletion   Boolean  @default(false)
  requireVideoCompletion  Boolean  @default(false)
  minVideoWatchPercentage Int      @default(80)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  module Module @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model Certificate {
  id                String     @id @default(uuid())
  userId            String
  courseId          String
  enrollmentId      String
  certificateNumber String     @unique
  verificationCode  String     @unique
  type              String     @default("completion") // completion, achievement, participation
  issuedAt          DateTime   @default(now())
  expiresAt         DateTime?
  status            String     @default("active") // active, revoked, expired
  certificateUrl    String?
  metadata          Json?
  course            Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user              User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  enrollment        Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([courseId])
  @@index([enrollmentId])
  @@index([verificationCode])
  @@index([certificateNumber])
}

model Quiz {
  id             String           @id @default(uuid())
  title          String
  courseId       String
  timeLimit      Int?
  createdAt      DateTime         @default(now())
  questions      Question[]
  course         Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  attempts       QuizAttempt[]
  QuizCompletion QuizCompletion[]

  @@index([courseId])
}

model Question {
  id      String       @id @default(uuid())
  quizId  String
  text    String
  type    QuestionType
  options String[]
  answer  String
  order   Int
  answers Answer[]
  quiz    Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId])
}

model QuizAttempt {
  id          String    @id @default(uuid())
  userId      String
  quizId      String
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  score       Float?
  answers     Answer[]
  quiz        Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([quizId])
}

model Answer {
  id            String      @id @default(uuid())
  quizAttemptId String
  questionId    String
  response      String
  isCorrect     Boolean?
  question      Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quizAttempt   QuizAttempt @relation(fields: [quizAttemptId], references: [id], onDelete: Cascade)

  @@index([quizAttemptId])
  @@index([questionId])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([rating])
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  content   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isRead])
  @@index([type])
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  createdAt  DateTime @default(now())
  isRead     Boolean  @default(false)
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
  @@index([isRead])
}

model DiscussionPost {
  id         String            @id @default(uuid())
  userId     String
  courseId   String
  title      String
  content    String
  category   String            @default("GENERAL") // GENERAL, Q&A, STUDY_TIPS, RESOURCE
  isResolved Boolean           @default(false)
  isPinned   Boolean           @default(false)
  isLocked   Boolean           @default(false)
  upvotes    Int               @default(0)
  downvotes  Int               @default(0)
  viewCount  Int               @default(0)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  course     Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies    DiscussionReply[]
  votes      DiscussionVote[]

  @@index([userId])
  @@index([courseId])
  @@index([category])
  @@index([createdAt])
}

model DiscussionReply {
  id                String                @id @default(uuid())
  postId            String
  userId            String
  content           String
  isAccepted        Boolean               @default(false)
  isInstructorReply Boolean               @default(false)
  upvotes           Int                   @default(0)
  downvotes         Int                   @default(0)
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt
  post              DiscussionPost        @relation(fields: [postId], references: [id], onDelete: Cascade)
  user              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes             DiscussionReplyVote[]

  @@index([postId])
  @@index([userId])
  @@index([createdAt])
}

model DiscussionVote {
  id           String         @id @default(uuid())
  discussionId String
  userId       String
  voteType     String // 'UPVOTE' or 'DOWNVOTE'
  createdAt    DateTime       @default(now())
  discussion   DiscussionPost @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([discussionId, userId])
  @@index([discussionId])
  @@index([userId])
}

model DiscussionReplyVote {
  id        String          @id @default(uuid())
  replyId   String
  userId    String
  voteType  String // 'UPVOTE' or 'DOWNVOTE'
  createdAt DateTime        @default(now())
  reply     DiscussionReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([replyId, userId])
  @@index([replyId])
  @@index([userId])
}

enum Role {
  ADMIN
  INSTRUCTOR
  STUDENT
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum MaterialType {
  VIDEO
  PDF
  IMAGE
  OTHER
  TEXT
  LINK
}

enum QuestionType {
  MCQ
  TRUE_FALSE
  SHORT_ANSWER
}

enum TimetableStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum NotificationType {
  SYSTEM
  COURSE
  MESSAGE
  REMINDER
}

enum CertificateType {
  COMPLETION
  ACHIEVEMENT
  PARTICIPATION
}

enum CertificateStatus {
  ACTIVE
  REVOKED
  EXPIRED
}
